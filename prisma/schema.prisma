// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  username        String            @unique
  email           String            @unique
  password        String
  files           File[] // Relation to File model
  createdAt       DateTime          @default(now())
  Folder          Folder[]
  RecentlyDeleted RecentlyDeleted[]
}

model File {
  id           String    @id @default(uuid())
  fileName     String
  filePath     String
  fileType     String
  fileSize     Int
  starred      Boolean   @default(false)
  uploadedAt   DateTime  @default(now())
  lastOpenedAt DateTime? @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  Folder       Folder?   @relation(fields: [folderId], references: [id])
  folderId     String?
}

// parent folders and subfolders are probably going to be saved for last
model Folder {
  id             String   @id @default(uuid())
  name           String
  files          File[] // Files inside the folder
  parentFolder   Folder?  @relation("Subfolders", fields: [parentFolderId], references: [id]) // Self-relation for subfolders
  parentFolderId String? // Optional, for root folders with no parent
  subfolders     Folder[] @relation("Subfolders") // Recursive relation for subfolders
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model RecentlyDeleted {
  id        String   @id @default(uuid())
  fileName  String
  filePath  String
  fileType  String
  fileSize  Int
  deletedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
